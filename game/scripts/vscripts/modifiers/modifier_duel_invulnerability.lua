modifier_duel_invulnerability = class({})

function modifier_duel_invulnerability:CheckState()
	return {
	[MODIFIER_STATE_INVULNERABLE] = true,
	[MODIFIER_STATE_MAGIC_IMMUNE] = true,
	}
end

function modifier_duel_invulnerability:OnCreated()
	local parent = self:GetParent()
  ProjectileManager:ProjectileDodge(parent)

  -- List of undispellable buffs and debuffs that are safe to remove without making errors, crashes etc.
  local undesirable_modifiers = {
    "modifier_black_king_bar_immune",
    "modifier_item_skadi_slow",               -- pierces BKB, doesn't get removed with BKB
    "modifier_heavens_halberd_debuff",        -- doesn't pierce BKB, doesn't get removed with BKB
    "modifier_silver_edge_debuff",            -- doesn't pierce BKB, doesn't get removed with BKB
    "modifier_ice_blast",
    "modifier_bloodseeker_rupture",
    "modifier_doom_bringer_doom",
    "modifier_invoker_deafening_blast_disarm",
    "modifier_sand_king_caustic_finale_orb",
    "modifier_shadow_demon_purge_slow",
    "modifier_venomancer_poison_nova",
    "modifier_viper_viper_strike_slow",
    "modifier_maledict"
  }

  for i=1, #undesirable_modifiers do
    parent:RemoveModifierByName(undesirable_modifiers[i])
  end

  -- Dispel stuff
  local BuffsCreatedThisFrameOnly = false
  local RemoveExceptions = false              -- Offensive Strong Dispel (yes or no), can cause errors, crashes etc.
  local RemoveStuns = true                    -- Defensive Strong Dispel (yes or no)

  parent:Purge(true, true, BuffsCreatedThisFrameOnly, RemoveStuns, RemoveExceptions)

end

function modifier_duel_invulnerability:IsHidden() return true end
function modifier_duel_invulnerability:IsPurgable()	return false end
function modifier_duel_invulnerability:DestroyOnExpire() return true end
